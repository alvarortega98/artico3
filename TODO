1. Implement runtime library as a kernel module, instead of as user-space code,
   so that multiple applications can use the ARTICo3 infrastructure simultaneously

   Seems "relatively easy" to achieve, the only big issue appears to be
   memory management/copy between user-space variables and DMA memory
   (in the current version, this is achieved by memcpy(malloc(), mmap())
   or memcpy(mmap(), malloc())).

   IDEAS:
       - Use kthreads instead of pthreads
       - Use ioctl() to implement each of the functions in artico3.c


2. Create setup script to generate basic Linux-based system with ARTICo3 support

   Can start from modified ReconOS + Pynq setup script

   1) Remove references to ReconOS + move dtc repository cloning to the
      beginning, because it is needed by U-Boot

   2) Compile DMA proxy driver and ARTICo3 device tree overlay:
          cd linux/drivers/dmaproxy && make ARCH=arm CROSS_COMPILE=(...) KDIR=(...)
          dtc -I dts -O dtb -@ -o artico3.dtbo templates/artico3_devicetree_overlay/artico3.dts

   3) Edit /etc/init.d/rcS:
          echo "++ Loading ARTICo3 device tree overlay..."
          mkdir /sys/kernel/config/device-tree/overlays/artico3
          echo artico3.dtbo > /sys/kernel/config/device-tree/overlays/artico3/path

          echo "++ Loading DMA proxy driver..."
          modprobe mdmaproxy


3. Add optional support for ARTICo3 kernel registers in HLS-based accelerators.
   Also, enable actual usage of these ARTICo3 kernel wrapper registers (now they
   are just there, but the template does not generate any interconnection port
   with the user logic).
